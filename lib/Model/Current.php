<?php
/**
 * Current
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Weather API
 *
 * # Introduction  WeatherAPI.com provides access to weather and geo data via a JSON/XML restful API. It allows developers to create desktop, web and mobile applications using this data very easy.    We provide following data through our API:     - Real-time weather - 14 day weather forecast - Astronomy - Time zone - Location data - Search or Autocomplete API - NEW: Historical weather - NEW: Future Weather (Upto 300 days ahead) - Weather Alerts - Air Quality Data  # Getting Started    You need to [signup](https://www.weatherapi.com/signup.aspx) and then you can find your API key under [your account](https://www.weatherapi.com/login.aspx), and start using API right away!    We have [code libraries](https://www.weatherapi.com/docs/code-libraries.aspx) for different programming languages like PHP, .net, JAVA, etc.  If you find any features missing or have any suggestions, please [contact us](https://www.weatherapi.com/contact.aspx).    # Authentication    API access to the data is protected by an API key. If at anytime, you find the API key has become vulnerable, please regenerate the key using Regenerate button next to the API key.  Authentication to the WeatherAPI.com API is provided by passing your API key as request parameter through an API .      ##  key parameter  key=<YOUR API KEY>
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Current Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Current implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'current';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'last_updated_epoch' => 'int',
        'last_updated' => 'string',
        'temp_c' => 'float',
        'temp_f' => 'float',
        'is_day' => 'int',
        'condition' => 'object',
        'wind_mph' => 'float',
        'wind_kph' => 'float',
        'wind_degree' => 'int',
        'wind_dir' => 'string',
        'pressure_mb' => 'int',
        'pressure_in' => 'float',
        'precip_mm' => 'int',
        'precip_in' => 'int',
        'humidity' => 'int',
        'cloud' => 'int',
        'feelslike_c' => 'int',
        'feelslike_f' => 'float',
        'vis_km' => 'int',
        'vis_miles' => 'int',
        'uv' => 'int',
        'gust_mph' => 'float',
        'gust_kph' => 'float',
        'air_quality' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'last_updated_epoch' => 'int32',
        'last_updated' => null,
        'temp_c' => null,
        'temp_f' => null,
        'is_day' => 'int32',
        'condition' => null,
        'wind_mph' => null,
        'wind_kph' => null,
        'wind_degree' => 'int32',
        'wind_dir' => null,
        'pressure_mb' => 'int32',
        'pressure_in' => null,
        'precip_mm' => 'int32',
        'precip_in' => 'int32',
        'humidity' => 'int32',
        'cloud' => 'int32',
        'feelslike_c' => 'int32',
        'feelslike_f' => null,
        'vis_km' => 'int32',
        'vis_miles' => 'int32',
        'uv' => 'int32',
        'gust_mph' => null,
        'gust_kph' => null,
        'air_quality' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'last_updated_epoch' => 'last_updated_epoch',
        'last_updated' => 'last_updated',
        'temp_c' => 'temp_c',
        'temp_f' => 'temp_f',
        'is_day' => 'is_day',
        'condition' => 'condition',
        'wind_mph' => 'wind_mph',
        'wind_kph' => 'wind_kph',
        'wind_degree' => 'wind_degree',
        'wind_dir' => 'wind_dir',
        'pressure_mb' => 'pressure_mb',
        'pressure_in' => 'pressure_in',
        'precip_mm' => 'precip_mm',
        'precip_in' => 'precip_in',
        'humidity' => 'humidity',
        'cloud' => 'cloud',
        'feelslike_c' => 'feelslike_c',
        'feelslike_f' => 'feelslike_f',
        'vis_km' => 'vis_km',
        'vis_miles' => 'vis_miles',
        'uv' => 'uv',
        'gust_mph' => 'gust_mph',
        'gust_kph' => 'gust_kph',
        'air_quality' => 'air_quality'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'last_updated_epoch' => 'setLastUpdatedEpoch',
        'last_updated' => 'setLastUpdated',
        'temp_c' => 'setTempC',
        'temp_f' => 'setTempF',
        'is_day' => 'setIsDay',
        'condition' => 'setCondition',
        'wind_mph' => 'setWindMph',
        'wind_kph' => 'setWindKph',
        'wind_degree' => 'setWindDegree',
        'wind_dir' => 'setWindDir',
        'pressure_mb' => 'setPressureMb',
        'pressure_in' => 'setPressureIn',
        'precip_mm' => 'setPrecipMm',
        'precip_in' => 'setPrecipIn',
        'humidity' => 'setHumidity',
        'cloud' => 'setCloud',
        'feelslike_c' => 'setFeelslikeC',
        'feelslike_f' => 'setFeelslikeF',
        'vis_km' => 'setVisKm',
        'vis_miles' => 'setVisMiles',
        'uv' => 'setUv',
        'gust_mph' => 'setGustMph',
        'gust_kph' => 'setGustKph',
        'air_quality' => 'setAirQuality'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'last_updated_epoch' => 'getLastUpdatedEpoch',
        'last_updated' => 'getLastUpdated',
        'temp_c' => 'getTempC',
        'temp_f' => 'getTempF',
        'is_day' => 'getIsDay',
        'condition' => 'getCondition',
        'wind_mph' => 'getWindMph',
        'wind_kph' => 'getWindKph',
        'wind_degree' => 'getWindDegree',
        'wind_dir' => 'getWindDir',
        'pressure_mb' => 'getPressureMb',
        'pressure_in' => 'getPressureIn',
        'precip_mm' => 'getPrecipMm',
        'precip_in' => 'getPrecipIn',
        'humidity' => 'getHumidity',
        'cloud' => 'getCloud',
        'feelslike_c' => 'getFeelslikeC',
        'feelslike_f' => 'getFeelslikeF',
        'vis_km' => 'getVisKm',
        'vis_miles' => 'getVisMiles',
        'uv' => 'getUv',
        'gust_mph' => 'getGustMph',
        'gust_kph' => 'getGustKph',
        'air_quality' => 'getAirQuality'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['last_updated_epoch'] = isset($data['last_updated_epoch']) ? $data['last_updated_epoch'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['temp_c'] = isset($data['temp_c']) ? $data['temp_c'] : null;
        $this->container['temp_f'] = isset($data['temp_f']) ? $data['temp_f'] : null;
        $this->container['is_day'] = isset($data['is_day']) ? $data['is_day'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['wind_mph'] = isset($data['wind_mph']) ? $data['wind_mph'] : null;
        $this->container['wind_kph'] = isset($data['wind_kph']) ? $data['wind_kph'] : null;
        $this->container['wind_degree'] = isset($data['wind_degree']) ? $data['wind_degree'] : null;
        $this->container['wind_dir'] = isset($data['wind_dir']) ? $data['wind_dir'] : null;
        $this->container['pressure_mb'] = isset($data['pressure_mb']) ? $data['pressure_mb'] : null;
        $this->container['pressure_in'] = isset($data['pressure_in']) ? $data['pressure_in'] : null;
        $this->container['precip_mm'] = isset($data['precip_mm']) ? $data['precip_mm'] : null;
        $this->container['precip_in'] = isset($data['precip_in']) ? $data['precip_in'] : null;
        $this->container['humidity'] = isset($data['humidity']) ? $data['humidity'] : null;
        $this->container['cloud'] = isset($data['cloud']) ? $data['cloud'] : null;
        $this->container['feelslike_c'] = isset($data['feelslike_c']) ? $data['feelslike_c'] : null;
        $this->container['feelslike_f'] = isset($data['feelslike_f']) ? $data['feelslike_f'] : null;
        $this->container['vis_km'] = isset($data['vis_km']) ? $data['vis_km'] : null;
        $this->container['vis_miles'] = isset($data['vis_miles']) ? $data['vis_miles'] : null;
        $this->container['uv'] = isset($data['uv']) ? $data['uv'] : null;
        $this->container['gust_mph'] = isset($data['gust_mph']) ? $data['gust_mph'] : null;
        $this->container['gust_kph'] = isset($data['gust_kph']) ? $data['gust_kph'] : null;
        $this->container['air_quality'] = isset($data['air_quality']) ? $data['air_quality'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets last_updated_epoch
     *
     * @return int
     */
    public function getLastUpdatedEpoch()
    {
        return $this->container['last_updated_epoch'];
    }

    /**
     * Sets last_updated_epoch
     *
     * @param int $last_updated_epoch last_updated_epoch
     *
     * @return $this
     */
    public function setLastUpdatedEpoch($last_updated_epoch)
    {
        $this->container['last_updated_epoch'] = $last_updated_epoch;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return string
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param string $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets temp_c
     *
     * @return float
     */
    public function getTempC()
    {
        return $this->container['temp_c'];
    }

    /**
     * Sets temp_c
     *
     * @param float $temp_c temp_c
     *
     * @return $this
     */
    public function setTempC($temp_c)
    {
        $this->container['temp_c'] = $temp_c;

        return $this;
    }

    /**
     * Gets temp_f
     *
     * @return float
     */
    public function getTempF()
    {
        return $this->container['temp_f'];
    }

    /**
     * Sets temp_f
     *
     * @param float $temp_f temp_f
     *
     * @return $this
     */
    public function setTempF($temp_f)
    {
        $this->container['temp_f'] = $temp_f;

        return $this;
    }

    /**
     * Gets is_day
     *
     * @return int
     */
    public function getIsDay()
    {
        return $this->container['is_day'];
    }

    /**
     * Sets is_day
     *
     * @param int $is_day is_day
     *
     * @return $this
     */
    public function setIsDay($is_day)
    {
        $this->container['is_day'] = $is_day;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return object
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param object $condition condition
     *
     * @return $this
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets wind_mph
     *
     * @return float
     */
    public function getWindMph()
    {
        return $this->container['wind_mph'];
    }

    /**
     * Sets wind_mph
     *
     * @param float $wind_mph wind_mph
     *
     * @return $this
     */
    public function setWindMph($wind_mph)
    {
        $this->container['wind_mph'] = $wind_mph;

        return $this;
    }

    /**
     * Gets wind_kph
     *
     * @return float
     */
    public function getWindKph()
    {
        return $this->container['wind_kph'];
    }

    /**
     * Sets wind_kph
     *
     * @param float $wind_kph wind_kph
     *
     * @return $this
     */
    public function setWindKph($wind_kph)
    {
        $this->container['wind_kph'] = $wind_kph;

        return $this;
    }

    /**
     * Gets wind_degree
     *
     * @return int
     */
    public function getWindDegree()
    {
        return $this->container['wind_degree'];
    }

    /**
     * Sets wind_degree
     *
     * @param int $wind_degree wind_degree
     *
     * @return $this
     */
    public function setWindDegree($wind_degree)
    {
        $this->container['wind_degree'] = $wind_degree;

        return $this;
    }

    /**
     * Gets wind_dir
     *
     * @return string
     */
    public function getWindDir()
    {
        return $this->container['wind_dir'];
    }

    /**
     * Sets wind_dir
     *
     * @param string $wind_dir wind_dir
     *
     * @return $this
     */
    public function setWindDir($wind_dir)
    {
        $this->container['wind_dir'] = $wind_dir;

        return $this;
    }

    /**
     * Gets pressure_mb
     *
     * @return int
     */
    public function getPressureMb()
    {
        return $this->container['pressure_mb'];
    }

    /**
     * Sets pressure_mb
     *
     * @param int $pressure_mb pressure_mb
     *
     * @return $this
     */
    public function setPressureMb($pressure_mb)
    {
        $this->container['pressure_mb'] = $pressure_mb;

        return $this;
    }

    /**
     * Gets pressure_in
     *
     * @return float
     */
    public function getPressureIn()
    {
        return $this->container['pressure_in'];
    }

    /**
     * Sets pressure_in
     *
     * @param float $pressure_in pressure_in
     *
     * @return $this
     */
    public function setPressureIn($pressure_in)
    {
        $this->container['pressure_in'] = $pressure_in;

        return $this;
    }

    /**
     * Gets precip_mm
     *
     * @return int
     */
    public function getPrecipMm()
    {
        return $this->container['precip_mm'];
    }

    /**
     * Sets precip_mm
     *
     * @param int $precip_mm precip_mm
     *
     * @return $this
     */
    public function setPrecipMm($precip_mm)
    {
        $this->container['precip_mm'] = $precip_mm;

        return $this;
    }

    /**
     * Gets precip_in
     *
     * @return int
     */
    public function getPrecipIn()
    {
        return $this->container['precip_in'];
    }

    /**
     * Sets precip_in
     *
     * @param int $precip_in precip_in
     *
     * @return $this
     */
    public function setPrecipIn($precip_in)
    {
        $this->container['precip_in'] = $precip_in;

        return $this;
    }

    /**
     * Gets humidity
     *
     * @return int
     */
    public function getHumidity()
    {
        return $this->container['humidity'];
    }

    /**
     * Sets humidity
     *
     * @param int $humidity humidity
     *
     * @return $this
     */
    public function setHumidity($humidity)
    {
        $this->container['humidity'] = $humidity;

        return $this;
    }

    /**
     * Gets cloud
     *
     * @return int
     */
    public function getCloud()
    {
        return $this->container['cloud'];
    }

    /**
     * Sets cloud
     *
     * @param int $cloud cloud
     *
     * @return $this
     */
    public function setCloud($cloud)
    {
        $this->container['cloud'] = $cloud;

        return $this;
    }

    /**
     * Gets feelslike_c
     *
     * @return int
     */
    public function getFeelslikeC()
    {
        return $this->container['feelslike_c'];
    }

    /**
     * Sets feelslike_c
     *
     * @param int $feelslike_c feelslike_c
     *
     * @return $this
     */
    public function setFeelslikeC($feelslike_c)
    {
        $this->container['feelslike_c'] = $feelslike_c;

        return $this;
    }

    /**
     * Gets feelslike_f
     *
     * @return float
     */
    public function getFeelslikeF()
    {
        return $this->container['feelslike_f'];
    }

    /**
     * Sets feelslike_f
     *
     * @param float $feelslike_f feelslike_f
     *
     * @return $this
     */
    public function setFeelslikeF($feelslike_f)
    {
        $this->container['feelslike_f'] = $feelslike_f;

        return $this;
    }

    /**
     * Gets vis_km
     *
     * @return int
     */
    public function getVisKm()
    {
        return $this->container['vis_km'];
    }

    /**
     * Sets vis_km
     *
     * @param int $vis_km vis_km
     *
     * @return $this
     */
    public function setVisKm($vis_km)
    {
        $this->container['vis_km'] = $vis_km;

        return $this;
    }

    /**
     * Gets vis_miles
     *
     * @return int
     */
    public function getVisMiles()
    {
        return $this->container['vis_miles'];
    }

    /**
     * Sets vis_miles
     *
     * @param int $vis_miles vis_miles
     *
     * @return $this
     */
    public function setVisMiles($vis_miles)
    {
        $this->container['vis_miles'] = $vis_miles;

        return $this;
    }

    /**
     * Gets uv
     *
     * @return int
     */
    public function getUv()
    {
        return $this->container['uv'];
    }

    /**
     * Sets uv
     *
     * @param int $uv uv
     *
     * @return $this
     */
    public function setUv($uv)
    {
        $this->container['uv'] = $uv;

        return $this;
    }

    /**
     * Gets gust_mph
     *
     * @return float
     */
    public function getGustMph()
    {
        return $this->container['gust_mph'];
    }

    /**
     * Sets gust_mph
     *
     * @param float $gust_mph gust_mph
     *
     * @return $this
     */
    public function setGustMph($gust_mph)
    {
        $this->container['gust_mph'] = $gust_mph;

        return $this;
    }

    /**
     * Gets gust_kph
     *
     * @return float
     */
    public function getGustKph()
    {
        return $this->container['gust_kph'];
    }

    /**
     * Sets gust_kph
     *
     * @param float $gust_kph gust_kph
     *
     * @return $this
     */
    public function setGustKph($gust_kph)
    {
        $this->container['gust_kph'] = $gust_kph;

        return $this;
    }

    /**
     * Gets air_quality
     *
     * @return object
     */
    public function getAirQuality()
    {
        return $this->container['air_quality'];
    }

    /**
     * Sets air_quality
     *
     * @param object $air_quality air_quality
     *
     * @return $this
     */
    public function setAirQuality($air_quality)
    {
        $this->container['air_quality'] = $air_quality;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


