<?php
/**
 * CurrentAirQuality
 *
 * PHP version 8.3
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Weather API
 *
 * # Introduction WeatherAPI.com provides access to weather and geo data via a JSON/XML restful API. It allows developers to create desktop, web and mobile applications using this data very easy. We provide following data through our API:     - Real-time weather - 14 day weather forecast - Historical Weather - Marine Weather and Tide Data - Future Weather (Upto 365 days ahead) - Daily and hourly intervals - 15 min interval (Enterprise only) - Astronomy - Time zone - Location data - Sports - Search or Autocomplete API - Weather Alerts - Air Quality Data - Bulk Request  # Getting Started    You need to [signup](https://www.weatherapi.com/signup.aspx) and then you can find your API key under [your account](https://www.weatherapi.com/login.aspx), and start using API right away!  Try our weather API by using interactive [API Explorer](https://www.weatherapi.com/api-explorer.aspx).  We also have SDK for popular framework/languages available on [Github](https://github.com/weatherapicom/) for quick integrations.  If you find any features missing or have any suggestions, please [contact us](https://www.weatherapi.com/contact.aspx).    # Authentication    API access to the data is protected by an API key. If at anytime, you find the API key has become vulnerable, please regenerate the key using Regenerate button next to the API key.    Authentication to the WeatherAPI.com API is provided by passing your API key as request parameter through an API .      ##  key parameter  key=YOUR API KEY
 *
 * OpenAPI spec version: 1.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.36
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CurrentAirQuality Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CurrentAirQuality implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'current_air_quality';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'co' => 'float',
        'no2' => 'float',
        'o3' => 'float',
        'so2' => 'float',
        'pm2_5' => 'float',
        'pm10' => 'float',
        'us_epa_index' => 'int',
        'gb_defra_index' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'co' => null,
        'no2' => null,
        'o3' => null,
        'so2' => null,
        'pm2_5' => null,
        'pm10' => null,
        'us_epa_index' => 'int32',
        'gb_defra_index' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'co' => 'co',
        'no2' => 'no2',
        'o3' => 'o3',
        'so2' => 'so2',
        'pm2_5' => 'pm2_5',
        'pm10' => 'pm10',
        'us_epa_index' => 'us-epa-index',
        'gb_defra_index' => 'gb-defra-index'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'co' => 'setCo',
        'no2' => 'setNo2',
        'o3' => 'setO3',
        'so2' => 'setSo2',
        'pm2_5' => 'setPm25',
        'pm10' => 'setPm10',
        'us_epa_index' => 'setUsEpaIndex',
        'gb_defra_index' => 'setGbDefraIndex'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'co' => 'getCo',
        'no2' => 'getNo2',
        'o3' => 'getO3',
        'so2' => 'getSo2',
        'pm2_5' => 'getPm25',
        'pm10' => 'getPm10',
        'us_epa_index' => 'getUsEpaIndex',
        'gb_defra_index' => 'getGbDefraIndex'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['co'] = isset($data['co']) ? $data['co'] : null;
        $this->container['no2'] = isset($data['no2']) ? $data['no2'] : null;
        $this->container['o3'] = isset($data['o3']) ? $data['o3'] : null;
        $this->container['so2'] = isset($data['so2']) ? $data['so2'] : null;
        $this->container['pm2_5'] = isset($data['pm2_5']) ? $data['pm2_5'] : null;
        $this->container['pm10'] = isset($data['pm10']) ? $data['pm10'] : null;
        $this->container['us_epa_index'] = isset($data['us_epa_index']) ? $data['us_epa_index'] : null;
        $this->container['gb_defra_index'] = isset($data['gb_defra_index']) ? $data['gb_defra_index'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets co
     *
     * @return float
     */
    public function getCo()
    {
        return $this->container['co'];
    }

    /**
     * Sets co
     *
     * @param float $co co
     *
     * @return $this
     */
    public function setCo($co)
    {
        $this->container['co'] = $co;

        return $this;
    }

    /**
     * Gets no2
     *
     * @return float
     */
    public function getNo2()
    {
        return $this->container['no2'];
    }

    /**
     * Sets no2
     *
     * @param float $no2 no2
     *
     * @return $this
     */
    public function setNo2($no2)
    {
        $this->container['no2'] = $no2;

        return $this;
    }

    /**
     * Gets o3
     *
     * @return float
     */
    public function getO3()
    {
        return $this->container['o3'];
    }

    /**
     * Sets o3
     *
     * @param float $o3 o3
     *
     * @return $this
     */
    public function setO3($o3)
    {
        $this->container['o3'] = $o3;

        return $this;
    }

    /**
     * Gets so2
     *
     * @return float
     */
    public function getSo2()
    {
        return $this->container['so2'];
    }

    /**
     * Sets so2
     *
     * @param float $so2 so2
     *
     * @return $this
     */
    public function setSo2($so2)
    {
        $this->container['so2'] = $so2;

        return $this;
    }

    /**
     * Gets pm2_5
     *
     * @return float
     */
    public function getPm25()
    {
        return $this->container['pm2_5'];
    }

    /**
     * Sets pm2_5
     *
     * @param float $pm2_5 pm2_5
     *
     * @return $this
     */
    public function setPm25($pm2_5)
    {
        $this->container['pm2_5'] = $pm2_5;

        return $this;
    }

    /**
     * Gets pm10
     *
     * @return float
     */
    public function getPm10()
    {
        return $this->container['pm10'];
    }

    /**
     * Sets pm10
     *
     * @param float $pm10 pm10
     *
     * @return $this
     */
    public function setPm10($pm10)
    {
        $this->container['pm10'] = $pm10;

        return $this;
    }

    /**
     * Gets us_epa_index
     *
     * @return int
     */
    public function getUsEpaIndex()
    {
        return $this->container['us_epa_index'];
    }

    /**
     * Sets us_epa_index
     *
     * @param int $us_epa_index us_epa_index
     *
     * @return $this
     */
    public function setUsEpaIndex($us_epa_index)
    {
        $this->container['us_epa_index'] = $us_epa_index;

        return $this;
    }

    /**
     * Gets gb_defra_index
     *
     * @return int
     */
    public function getGbDefraIndex()
    {
        return $this->container['gb_defra_index'];
    }

    /**
     * Sets gb_defra_index
     *
     * @param int $gb_defra_index gb_defra_index
     *
     * @return $this
     */
    public function setGbDefraIndex($gb_defra_index)
    {
        $this->container['gb_defra_index'] = $gb_defra_index;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


