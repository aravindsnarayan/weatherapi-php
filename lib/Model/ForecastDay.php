<?php
/**
 * ForecastDay
 *
 * PHP version 8.3
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Weather API
 *
 * # Introduction WeatherAPI.com provides access to weather and geo data via a JSON/XML restful API. It allows developers to create desktop, web and mobile applications using this data very easy. We provide following data through our API:     - Real-time weather - 14 day weather forecast - Historical Weather - Marine Weather and Tide Data - Future Weather (Upto 365 days ahead) - Daily and hourly intervals - 15 min interval (Enterprise only) - Astronomy - Time zone - Location data - Sports - Search or Autocomplete API - Weather Alerts - Air Quality Data - Bulk Request  # Getting Started    You need to [signup](https://www.weatherapi.com/signup.aspx) and then you can find your API key under [your account](https://www.weatherapi.com/login.aspx), and start using API right away!  Try our weather API by using interactive [API Explorer](https://www.weatherapi.com/api-explorer.aspx).  We also have SDK for popular framework/languages available on [Github](https://github.com/weatherapicom/) for quick integrations.  If you find any features missing or have any suggestions, please [contact us](https://www.weatherapi.com/contact.aspx).    # Authentication    API access to the data is protected by an API key. If at anytime, you find the API key has become vulnerable, please regenerate the key using Regenerate button next to the API key.    Authentication to the WeatherAPI.com API is provided by passing your API key as request parameter through an API .      ##  key parameter  key=YOUR API KEY
 *
 * OpenAPI spec version: 1.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.36
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ForecastDay Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ForecastDay implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'forecast_day';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'maxtemp_c' => 'float',
        'maxtemp_f' => 'float',
        'mintemp_c' => 'float',
        'mintemp_f' => 'float',
        'avgtemp_c' => 'float',
        'avgtemp_f' => 'float',
        'maxwind_mph' => 'float',
        'maxwind_kph' => 'float',
        'totalprecip_mm' => 'float',
        'totalprecip_in' => 'float',
        'avgvis_km' => 'float',
        'avgvis_miles' => 'float',
        'avghumidity' => 'float',
        'daily_will_it_rain' => 'int',
        'daily_chance_of_rain' => 'float',
        'daily_will_it_snow' => 'int',
        'daily_chance_of_snow' => 'float',
        'condition' => '\Swagger\Client\Model\ForecastDayCondition',
        'uv' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'maxtemp_c' => null,
        'maxtemp_f' => null,
        'mintemp_c' => null,
        'mintemp_f' => null,
        'avgtemp_c' => null,
        'avgtemp_f' => null,
        'maxwind_mph' => null,
        'maxwind_kph' => null,
        'totalprecip_mm' => null,
        'totalprecip_in' => null,
        'avgvis_km' => null,
        'avgvis_miles' => null,
        'avghumidity' => null,
        'daily_will_it_rain' => 'int32',
        'daily_chance_of_rain' => null,
        'daily_will_it_snow' => 'int32',
        'daily_chance_of_snow' => null,
        'condition' => null,
        'uv' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'maxtemp_c' => 'maxtemp_c',
        'maxtemp_f' => 'maxtemp_f',
        'mintemp_c' => 'mintemp_c',
        'mintemp_f' => 'mintemp_f',
        'avgtemp_c' => 'avgtemp_c',
        'avgtemp_f' => 'avgtemp_f',
        'maxwind_mph' => 'maxwind_mph',
        'maxwind_kph' => 'maxwind_kph',
        'totalprecip_mm' => 'totalprecip_mm',
        'totalprecip_in' => 'totalprecip_in',
        'avgvis_km' => 'avgvis_km',
        'avgvis_miles' => 'avgvis_miles',
        'avghumidity' => 'avghumidity',
        'daily_will_it_rain' => 'daily_will_it_rain',
        'daily_chance_of_rain' => 'daily_chance_of_rain',
        'daily_will_it_snow' => 'daily_will_it_snow',
        'daily_chance_of_snow' => 'daily_chance_of_snow',
        'condition' => 'condition',
        'uv' => 'uv'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'maxtemp_c' => 'setMaxtempC',
        'maxtemp_f' => 'setMaxtempF',
        'mintemp_c' => 'setMintempC',
        'mintemp_f' => 'setMintempF',
        'avgtemp_c' => 'setAvgtempC',
        'avgtemp_f' => 'setAvgtempF',
        'maxwind_mph' => 'setMaxwindMph',
        'maxwind_kph' => 'setMaxwindKph',
        'totalprecip_mm' => 'setTotalprecipMm',
        'totalprecip_in' => 'setTotalprecipIn',
        'avgvis_km' => 'setAvgvisKm',
        'avgvis_miles' => 'setAvgvisMiles',
        'avghumidity' => 'setAvghumidity',
        'daily_will_it_rain' => 'setDailyWillItRain',
        'daily_chance_of_rain' => 'setDailyChanceOfRain',
        'daily_will_it_snow' => 'setDailyWillItSnow',
        'daily_chance_of_snow' => 'setDailyChanceOfSnow',
        'condition' => 'setCondition',
        'uv' => 'setUv'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'maxtemp_c' => 'getMaxtempC',
        'maxtemp_f' => 'getMaxtempF',
        'mintemp_c' => 'getMintempC',
        'mintemp_f' => 'getMintempF',
        'avgtemp_c' => 'getAvgtempC',
        'avgtemp_f' => 'getAvgtempF',
        'maxwind_mph' => 'getMaxwindMph',
        'maxwind_kph' => 'getMaxwindKph',
        'totalprecip_mm' => 'getTotalprecipMm',
        'totalprecip_in' => 'getTotalprecipIn',
        'avgvis_km' => 'getAvgvisKm',
        'avgvis_miles' => 'getAvgvisMiles',
        'avghumidity' => 'getAvghumidity',
        'daily_will_it_rain' => 'getDailyWillItRain',
        'daily_chance_of_rain' => 'getDailyChanceOfRain',
        'daily_will_it_snow' => 'getDailyWillItSnow',
        'daily_chance_of_snow' => 'getDailyChanceOfSnow',
        'condition' => 'getCondition',
        'uv' => 'getUv'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['maxtemp_c'] = isset($data['maxtemp_c']) ? $data['maxtemp_c'] : null;
        $this->container['maxtemp_f'] = isset($data['maxtemp_f']) ? $data['maxtemp_f'] : null;
        $this->container['mintemp_c'] = isset($data['mintemp_c']) ? $data['mintemp_c'] : null;
        $this->container['mintemp_f'] = isset($data['mintemp_f']) ? $data['mintemp_f'] : null;
        $this->container['avgtemp_c'] = isset($data['avgtemp_c']) ? $data['avgtemp_c'] : null;
        $this->container['avgtemp_f'] = isset($data['avgtemp_f']) ? $data['avgtemp_f'] : null;
        $this->container['maxwind_mph'] = isset($data['maxwind_mph']) ? $data['maxwind_mph'] : null;
        $this->container['maxwind_kph'] = isset($data['maxwind_kph']) ? $data['maxwind_kph'] : null;
        $this->container['totalprecip_mm'] = isset($data['totalprecip_mm']) ? $data['totalprecip_mm'] : null;
        $this->container['totalprecip_in'] = isset($data['totalprecip_in']) ? $data['totalprecip_in'] : null;
        $this->container['avgvis_km'] = isset($data['avgvis_km']) ? $data['avgvis_km'] : null;
        $this->container['avgvis_miles'] = isset($data['avgvis_miles']) ? $data['avgvis_miles'] : null;
        $this->container['avghumidity'] = isset($data['avghumidity']) ? $data['avghumidity'] : null;
        $this->container['daily_will_it_rain'] = isset($data['daily_will_it_rain']) ? $data['daily_will_it_rain'] : null;
        $this->container['daily_chance_of_rain'] = isset($data['daily_chance_of_rain']) ? $data['daily_chance_of_rain'] : null;
        $this->container['daily_will_it_snow'] = isset($data['daily_will_it_snow']) ? $data['daily_will_it_snow'] : null;
        $this->container['daily_chance_of_snow'] = isset($data['daily_chance_of_snow']) ? $data['daily_chance_of_snow'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['uv'] = isset($data['uv']) ? $data['uv'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets maxtemp_c
     *
     * @return float
     */
    public function getMaxtempC()
    {
        return $this->container['maxtemp_c'];
    }

    /**
     * Sets maxtemp_c
     *
     * @param float $maxtemp_c maxtemp_c
     *
     * @return $this
     */
    public function setMaxtempC($maxtemp_c)
    {
        $this->container['maxtemp_c'] = $maxtemp_c;

        return $this;
    }

    /**
     * Gets maxtemp_f
     *
     * @return float
     */
    public function getMaxtempF()
    {
        return $this->container['maxtemp_f'];
    }

    /**
     * Sets maxtemp_f
     *
     * @param float $maxtemp_f maxtemp_f
     *
     * @return $this
     */
    public function setMaxtempF($maxtemp_f)
    {
        $this->container['maxtemp_f'] = $maxtemp_f;

        return $this;
    }

    /**
     * Gets mintemp_c
     *
     * @return float
     */
    public function getMintempC()
    {
        return $this->container['mintemp_c'];
    }

    /**
     * Sets mintemp_c
     *
     * @param float $mintemp_c mintemp_c
     *
     * @return $this
     */
    public function setMintempC($mintemp_c)
    {
        $this->container['mintemp_c'] = $mintemp_c;

        return $this;
    }

    /**
     * Gets mintemp_f
     *
     * @return float
     */
    public function getMintempF()
    {
        return $this->container['mintemp_f'];
    }

    /**
     * Sets mintemp_f
     *
     * @param float $mintemp_f mintemp_f
     *
     * @return $this
     */
    public function setMintempF($mintemp_f)
    {
        $this->container['mintemp_f'] = $mintemp_f;

        return $this;
    }

    /**
     * Gets avgtemp_c
     *
     * @return float
     */
    public function getAvgtempC()
    {
        return $this->container['avgtemp_c'];
    }

    /**
     * Sets avgtemp_c
     *
     * @param float $avgtemp_c avgtemp_c
     *
     * @return $this
     */
    public function setAvgtempC($avgtemp_c)
    {
        $this->container['avgtemp_c'] = $avgtemp_c;

        return $this;
    }

    /**
     * Gets avgtemp_f
     *
     * @return float
     */
    public function getAvgtempF()
    {
        return $this->container['avgtemp_f'];
    }

    /**
     * Sets avgtemp_f
     *
     * @param float $avgtemp_f avgtemp_f
     *
     * @return $this
     */
    public function setAvgtempF($avgtemp_f)
    {
        $this->container['avgtemp_f'] = $avgtemp_f;

        return $this;
    }

    /**
     * Gets maxwind_mph
     *
     * @return float
     */
    public function getMaxwindMph()
    {
        return $this->container['maxwind_mph'];
    }

    /**
     * Sets maxwind_mph
     *
     * @param float $maxwind_mph maxwind_mph
     *
     * @return $this
     */
    public function setMaxwindMph($maxwind_mph)
    {
        $this->container['maxwind_mph'] = $maxwind_mph;

        return $this;
    }

    /**
     * Gets maxwind_kph
     *
     * @return float
     */
    public function getMaxwindKph()
    {
        return $this->container['maxwind_kph'];
    }

    /**
     * Sets maxwind_kph
     *
     * @param float $maxwind_kph maxwind_kph
     *
     * @return $this
     */
    public function setMaxwindKph($maxwind_kph)
    {
        $this->container['maxwind_kph'] = $maxwind_kph;

        return $this;
    }

    /**
     * Gets totalprecip_mm
     *
     * @return float
     */
    public function getTotalprecipMm()
    {
        return $this->container['totalprecip_mm'];
    }

    /**
     * Sets totalprecip_mm
     *
     * @param float $totalprecip_mm totalprecip_mm
     *
     * @return $this
     */
    public function setTotalprecipMm($totalprecip_mm)
    {
        $this->container['totalprecip_mm'] = $totalprecip_mm;

        return $this;
    }

    /**
     * Gets totalprecip_in
     *
     * @return float
     */
    public function getTotalprecipIn()
    {
        return $this->container['totalprecip_in'];
    }

    /**
     * Sets totalprecip_in
     *
     * @param float $totalprecip_in totalprecip_in
     *
     * @return $this
     */
    public function setTotalprecipIn($totalprecip_in)
    {
        $this->container['totalprecip_in'] = $totalprecip_in;

        return $this;
    }

    /**
     * Gets avgvis_km
     *
     * @return float
     */
    public function getAvgvisKm()
    {
        return $this->container['avgvis_km'];
    }

    /**
     * Sets avgvis_km
     *
     * @param float $avgvis_km avgvis_km
     *
     * @return $this
     */
    public function setAvgvisKm($avgvis_km)
    {
        $this->container['avgvis_km'] = $avgvis_km;

        return $this;
    }

    /**
     * Gets avgvis_miles
     *
     * @return float
     */
    public function getAvgvisMiles()
    {
        return $this->container['avgvis_miles'];
    }

    /**
     * Sets avgvis_miles
     *
     * @param float $avgvis_miles avgvis_miles
     *
     * @return $this
     */
    public function setAvgvisMiles($avgvis_miles)
    {
        $this->container['avgvis_miles'] = $avgvis_miles;

        return $this;
    }

    /**
     * Gets avghumidity
     *
     * @return float
     */
    public function getAvghumidity()
    {
        return $this->container['avghumidity'];
    }

    /**
     * Sets avghumidity
     *
     * @param float $avghumidity avghumidity
     *
     * @return $this
     */
    public function setAvghumidity($avghumidity)
    {
        $this->container['avghumidity'] = $avghumidity;

        return $this;
    }

    /**
     * Gets daily_will_it_rain
     *
     * @return int
     */
    public function getDailyWillItRain()
    {
        return $this->container['daily_will_it_rain'];
    }

    /**
     * Sets daily_will_it_rain
     *
     * @param int $daily_will_it_rain daily_will_it_rain
     *
     * @return $this
     */
    public function setDailyWillItRain($daily_will_it_rain)
    {
        $this->container['daily_will_it_rain'] = $daily_will_it_rain;

        return $this;
    }

    /**
     * Gets daily_chance_of_rain
     *
     * @return float
     */
    public function getDailyChanceOfRain()
    {
        return $this->container['daily_chance_of_rain'];
    }

    /**
     * Sets daily_chance_of_rain
     *
     * @param float $daily_chance_of_rain daily_chance_of_rain
     *
     * @return $this
     */
    public function setDailyChanceOfRain($daily_chance_of_rain)
    {
        $this->container['daily_chance_of_rain'] = $daily_chance_of_rain;

        return $this;
    }

    /**
     * Gets daily_will_it_snow
     *
     * @return int
     */
    public function getDailyWillItSnow()
    {
        return $this->container['daily_will_it_snow'];
    }

    /**
     * Sets daily_will_it_snow
     *
     * @param int $daily_will_it_snow daily_will_it_snow
     *
     * @return $this
     */
    public function setDailyWillItSnow($daily_will_it_snow)
    {
        $this->container['daily_will_it_snow'] = $daily_will_it_snow;

        return $this;
    }

    /**
     * Gets daily_chance_of_snow
     *
     * @return float
     */
    public function getDailyChanceOfSnow()
    {
        return $this->container['daily_chance_of_snow'];
    }

    /**
     * Sets daily_chance_of_snow
     *
     * @param float $daily_chance_of_snow daily_chance_of_snow
     *
     * @return $this
     */
    public function setDailyChanceOfSnow($daily_chance_of_snow)
    {
        $this->container['daily_chance_of_snow'] = $daily_chance_of_snow;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return \Swagger\Client\Model\ForecastDayCondition
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param \Swagger\Client\Model\ForecastDayCondition $condition condition
     *
     * @return $this
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets uv
     *
     * @return int
     */
    public function getUv()
    {
        return $this->container['uv'];
    }

    /**
     * Sets uv
     *
     * @param int $uv uv
     *
     * @return $this
     */
    public function setUv($uv)
    {
        $this->container['uv'] = $uv;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


