<?php
/**
 * Ip
 *
 * PHP version 8.3
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Weather API
 *
 * # Introduction WeatherAPI.com provides access to weather and geo data via a JSON/XML restful API. It allows developers to create desktop, web and mobile applications using this data very easy. We provide following data through our API:     - Real-time weather - 14 day weather forecast - Historical Weather - Marine Weather and Tide Data - Future Weather (Upto 365 days ahead) - Daily and hourly intervals - 15 min interval (Enterprise only) - Astronomy - Time zone - Location data - Sports - Search or Autocomplete API - Weather Alerts - Air Quality Data - Bulk Request  # Getting Started    You need to [signup](https://www.weatherapi.com/signup.aspx) and then you can find your API key under [your account](https://www.weatherapi.com/login.aspx), and start using API right away!  Try our weather API by using interactive [API Explorer](https://www.weatherapi.com/api-explorer.aspx).  We also have SDK for popular framework/languages available on [Github](https://github.com/weatherapicom/) for quick integrations.  If you find any features missing or have any suggestions, please [contact us](https://www.weatherapi.com/contact.aspx).    # Authentication    API access to the data is protected by an API key. If at anytime, you find the API key has become vulnerable, please regenerate the key using Regenerate button next to the API key.    Authentication to the WeatherAPI.com API is provided by passing your API key as request parameter through an API .      ##  key parameter  key=YOUR API KEY
 *
 * OpenAPI spec version: 1.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.36
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Ip Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Ip implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ip';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ip' => 'string',
        'type' => 'string',
        'continent_code' => 'string',
        'continent_name' => 'string',
        'country_code' => 'string',
        'country_name' => 'string',
        'is_eu' => 'string',
        'geoname_id' => 'int',
        'city' => 'string',
        'region' => 'string',
        'lat' => 'float',
        'lon' => 'float',
        'tz_id' => 'string',
        'localtime_epoch' => 'int',
        'localtime' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ip' => null,
        'type' => null,
        'continent_code' => null,
        'continent_name' => null,
        'country_code' => null,
        'country_name' => null,
        'is_eu' => null,
        'geoname_id' => 'int32',
        'city' => null,
        'region' => null,
        'lat' => null,
        'lon' => null,
        'tz_id' => null,
        'localtime_epoch' => 'int32',
        'localtime' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ip' => 'ip',
        'type' => 'type',
        'continent_code' => 'continent_code',
        'continent_name' => 'continent_name',
        'country_code' => 'country_code',
        'country_name' => 'country_name',
        'is_eu' => 'is_eu',
        'geoname_id' => 'geoname_id',
        'city' => 'city',
        'region' => 'region',
        'lat' => 'lat',
        'lon' => 'lon',
        'tz_id' => 'tz_id',
        'localtime_epoch' => 'localtime_epoch',
        'localtime' => 'localtime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ip' => 'setIp',
        'type' => 'setType',
        'continent_code' => 'setContinentCode',
        'continent_name' => 'setContinentName',
        'country_code' => 'setCountryCode',
        'country_name' => 'setCountryName',
        'is_eu' => 'setIsEu',
        'geoname_id' => 'setGeonameId',
        'city' => 'setCity',
        'region' => 'setRegion',
        'lat' => 'setLat',
        'lon' => 'setLon',
        'tz_id' => 'setTzId',
        'localtime_epoch' => 'setLocaltimeEpoch',
        'localtime' => 'setLocaltime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ip' => 'getIp',
        'type' => 'getType',
        'continent_code' => 'getContinentCode',
        'continent_name' => 'getContinentName',
        'country_code' => 'getCountryCode',
        'country_name' => 'getCountryName',
        'is_eu' => 'getIsEu',
        'geoname_id' => 'getGeonameId',
        'city' => 'getCity',
        'region' => 'getRegion',
        'lat' => 'getLat',
        'lon' => 'getLon',
        'tz_id' => 'getTzId',
        'localtime_epoch' => 'getLocaltimeEpoch',
        'localtime' => 'getLocaltime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['continent_code'] = isset($data['continent_code']) ? $data['continent_code'] : null;
        $this->container['continent_name'] = isset($data['continent_name']) ? $data['continent_name'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['country_name'] = isset($data['country_name']) ? $data['country_name'] : null;
        $this->container['is_eu'] = isset($data['is_eu']) ? $data['is_eu'] : null;
        $this->container['geoname_id'] = isset($data['geoname_id']) ? $data['geoname_id'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['lat'] = isset($data['lat']) ? $data['lat'] : null;
        $this->container['lon'] = isset($data['lon']) ? $data['lon'] : null;
        $this->container['tz_id'] = isset($data['tz_id']) ? $data['tz_id'] : null;
        $this->container['localtime_epoch'] = isset($data['localtime_epoch']) ? $data['localtime_epoch'] : null;
        $this->container['localtime'] = isset($data['localtime']) ? $data['localtime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ip
     *
     * @return string
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string $ip ip
     *
     * @return $this
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets continent_code
     *
     * @return string
     */
    public function getContinentCode()
    {
        return $this->container['continent_code'];
    }

    /**
     * Sets continent_code
     *
     * @param string $continent_code continent_code
     *
     * @return $this
     */
    public function setContinentCode($continent_code)
    {
        $this->container['continent_code'] = $continent_code;

        return $this;
    }

    /**
     * Gets continent_name
     *
     * @return string
     */
    public function getContinentName()
    {
        return $this->container['continent_name'];
    }

    /**
     * Sets continent_name
     *
     * @param string $continent_name continent_name
     *
     * @return $this
     */
    public function setContinentName($continent_name)
    {
        $this->container['continent_name'] = $continent_name;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code country_code
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets country_name
     *
     * @return string
     */
    public function getCountryName()
    {
        return $this->container['country_name'];
    }

    /**
     * Sets country_name
     *
     * @param string $country_name country_name
     *
     * @return $this
     */
    public function setCountryName($country_name)
    {
        $this->container['country_name'] = $country_name;

        return $this;
    }

    /**
     * Gets is_eu
     *
     * @return string
     */
    public function getIsEu()
    {
        return $this->container['is_eu'];
    }

    /**
     * Sets is_eu
     *
     * @param string $is_eu is_eu
     *
     * @return $this
     */
    public function setIsEu($is_eu)
    {
        $this->container['is_eu'] = $is_eu;

        return $this;
    }

    /**
     * Gets geoname_id
     *
     * @return int
     */
    public function getGeonameId()
    {
        return $this->container['geoname_id'];
    }

    /**
     * Sets geoname_id
     *
     * @param int $geoname_id geoname_id
     *
     * @return $this
     */
    public function setGeonameId($geoname_id)
    {
        $this->container['geoname_id'] = $geoname_id;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets lat
     *
     * @return float
     */
    public function getLat()
    {
        return $this->container['lat'];
    }

    /**
     * Sets lat
     *
     * @param float $lat lat
     *
     * @return $this
     */
    public function setLat($lat)
    {
        $this->container['lat'] = $lat;

        return $this;
    }

    /**
     * Gets lon
     *
     * @return float
     */
    public function getLon()
    {
        return $this->container['lon'];
    }

    /**
     * Sets lon
     *
     * @param float $lon lon
     *
     * @return $this
     */
    public function setLon($lon)
    {
        $this->container['lon'] = $lon;

        return $this;
    }

    /**
     * Gets tz_id
     *
     * @return string
     */
    public function getTzId()
    {
        return $this->container['tz_id'];
    }

    /**
     * Sets tz_id
     *
     * @param string $tz_id tz_id
     *
     * @return $this
     */
    public function setTzId($tz_id)
    {
        $this->container['tz_id'] = $tz_id;

        return $this;
    }

    /**
     * Gets localtime_epoch
     *
     * @return int
     */
    public function getLocaltimeEpoch()
    {
        return $this->container['localtime_epoch'];
    }

    /**
     * Sets localtime_epoch
     *
     * @param int $localtime_epoch localtime_epoch
     *
     * @return $this
     */
    public function setLocaltimeEpoch($localtime_epoch)
    {
        $this->container['localtime_epoch'] = $localtime_epoch;

        return $this;
    }

    /**
     * Gets localtime
     *
     * @return string
     */
    public function getLocaltime()
    {
        return $this->container['localtime'];
    }

    /**
     * Sets localtime
     *
     * @param string $localtime localtime
     *
     * @return $this
     */
    public function setLocaltime($localtime)
    {
        $this->container['localtime'] = $localtime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


